pragma solidity ^0.5.10;

contract ERC20Interface {
    //function name() public view returns (string memory);
    //function symbol() public view returns (string memory);
    //function decimals() public view returns (uint8);
    //function totalSupply() public view returns (uint256);
    function balanceOf(address _owner) public view returns (uint256 balance);
    function transfer(address _to, uint256 _value) public returns (bool success);
    //function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
    //function approve(address _spender, uint256 _value) public returns (bool success);
    //function allowance(address _owner, address _spender) public view returns (uint256 remaining);
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract ERC20 is ERC20Interface {
    //string private _name;
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    
    mapping(address => uint256) private balances;
    
    constructor(
        string memory _name, 
        string memory _symbol, 
        uint8 _decimals, 
        uint256 _totalSupply)
        
    public {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
        balances[msg.sender] = _totalSupply;
    }
    
     function balanceOf(address _owner) public view returns (uint256 balance){
         return balances[_owner];
     }
     
     function transfer(address _to, uint256 _value) public returns (bool success){
         // Verifica se conta origem possui token suficiente
         require(balances[msg.sender] >= _value);
         balances[msg.sender] -= _value;
         balances[_to] += _value;
         // emite evento
         emit Transfer(msg.sender, _to, _value);
         return true;
     }
    
    
}
